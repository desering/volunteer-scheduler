---
// https://github.com/payloadcms/payload/blob/main/packages/next/src/routes/rest/auth/login.ts
// Astro alternative on above file

import { generatePayloadCookie } from "payload";
import { css } from "styled-system/css/css";
import { Flex, HStack, panda } from "styled-system/jsx";
import { vstack } from "styled-system/patterns";
import { button } from "styled-system/recipes/button";
import { input } from "styled-system/recipes/input";
import Layout from "~/layouts/layout.astro";
import { actions } from "astro:actions";

if (Astro.locals.user) {
  return Astro.redirect("/");
}

const errors: string[] = [];

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();

  const email = data.get("email") as string | null;
  const password = data.get("password") as string | null;
  const passwordAgain = data.get("password-again") as string | null;
  const preferredName = data.get("preferredName") as string | null;

  if (
    email &&
    password &&
    passwordAgain &&
    password === passwordAgain &&
    preferredName &&
    preferredName.length >= 3
  ) {
    const registrationSuccess = await Astro.callAction(actions.createUser, {
      email,
      password,
      preferredName,
    });

    console.log("registrationSuccess", registrationSuccess);
    if (registrationSuccess.data) {
      await Astro.callAction(actions.loginUser, {
        email,
        password,
      });
      Astro.redirect("/");
    } else {
      errors.push(registrationSuccess.error.message);
    }
  } else {
    if (!email) errors.push("Email is required.");
    if (!password) errors.push("Password is required.");

    if (!preferredName) {
      errors.push("Preferred name is required.");
    } else if (preferredName.length < 3) {
      errors.push("Preferred name must be at least 3 characters.");
    }

    if (password !== passwordAgain) errors.push("Passwords do not match.");
  }
}
---

<Layout title="Sering Volunteer Scheduling | Login">
  <panda.div
    display="flex"
    minHeight="screen"
    width="screen"
    justifyContent="center"
    alignItems="center"
  >
    <form method="POST" class={vstack({ alignItems: "stretch" })}>
      {
        errors.map((error) => (
          <panda.div
            class={css({
              color: "gray.1",
              backgroundColor: "tomato",
              paddingX: "4",
              paddingY: "2",
            })}
          >
            <panda.div>{error}</panda.div>
          </panda.div>
        ))
      }

      <div>
        <label for="email">Email:</label>
        <input
          type="email"
          id="email"
          name="email"
          required
          class={input({
            size: "lg",
          })}
        />
        <p>
          This will be your login! We only use this email to recover your
          account
        </p>
      </div>
      <HStack>
        <panda.div flexBasis="1/2">
          <label for="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            required
            class={input({
              size: "lg",
            })}
          />
        </panda.div>

        <panda.div flexBasis="1/2">
          <label for="password">Confirm Password:</label>
          <input
            type="password"
            id="password-again"
            name="password-again"
            required
            class={input({
              size: "lg",
            })}
          />
        </panda.div>
      </HStack>

      <panda.div width="full">
        <label for="preferredName">Preferred Name:</label>
        <input
          type="text"
          id="preferredName"
          name="preferredName"
          required
          class={input({
            size: "lg",
          })}
        />
        <p>This preffered name will be visible for everyone</p>
      </panda.div>

      <button
        type="submit"
        class:list={[
          button({ size: "lg", variant: "solid" }),
          css({ flexGrow: 1 }),
        ]}
      >
        Register
      </button>

      <a
        type="button"
        onclick="window.location.href='/'"
        class:list={[
          button({ size: "lg", variant: "outline" }),
          css({ flexGrow: 1 }),
        ]}
      >
        Return
      </a>
    </form>
  </panda.div>
</Layout>
